name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  pre-commit-check:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Install tools
        run: >
          python -m virtualenv .venv ;
          .venv\Scripts\activate ;
          python -m pip install --upgrade pip ;
          pip install pre-commit lizard ;
      - name: checks
        run: .venv\Scripts\activate ; pre-commit run --all-files
  cpd-check:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -D LINKAGE=SHARED -D BUILD_ENABLE_CPD=ON -D 3RDPARTY_LIBRARIES="Catch2;OpenCV" -D 3RDPARTY_LIBRARIES_VERSIONS="3.3.1;4.7.0" -S .. -B .
      - name: CPD check
        run: |
          cd build
          cmake --build . --target CPD
  Release:
    needs: [
            pre-commit-check,
            cpd-check,
           ]
    runs-on: ubuntu-latest
    container: morfin/myalpine:3.17.2_CMake_3.25.2_OpenCV_4.7.0_Catch_v3.3.1_Release
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -D LINKAGE=SHARED -D 3RDPARTY_LIBRARIES="Catch2;OpenCV" -D 3RDPARTY_LIBRARIES_VERSIONS="3.3.1;4.7.0" -DCMAKE_BUILD_TYPE=Release -S .. -B .
      - name: Build
        run: |
          cd build
          cmake --build . --config Release
      - name: Test
        run: |
          cd build
          ctest --output-on-failure -C Release -j 1
  Debug:
    needs: [
            pre-commit-check,
            cpd-check,
           ]
    runs-on: ubuntu-latest
    container: morfin/myalpine:3.17.2_CMake_3.25.2_OpenCV_4.7.0_Catch_v3.3.1_Debug
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -D LINKAGE=SHARED -D 3RDPARTY_LIBRARIES="Catch2;OpenCV" -D 3RDPARTY_LIBRARIES_VERSIONS="3.3.1;4.7.0" -DCMAKE_BUILD_TYPE=Debug -S .. -B .
      - name: Build
        run: |
          cd build
          cmake --build . --config Debug
      - name: Test
        run: |
          cd build
          ctest --output-on-failure -C Debug -j 1
  Coverage:
    needs: [
            Release,
            Debug,
           ]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -D LINKAGE=SHARED -D 3RDPARTY_LIBRARIES="Catch2;OpenCV" -D 3RDPARTY_LIBRARIES_VERSIONS="3.3.1;4.7.0" -DCMAKE_BUILD_TYPE=Debug -DBUILD_ENABLE_COVERAGE=ON -S .. -B .
      - name: Compute Coverage
        run: |
          cd build
          cmake --build . --config Debug --target COVERAGE
      - name: Upload coverage to Codecov
        run: |
          Invoke-WebRequest -Uri "https://github.com/codecov/codecov-exe/releases/download/1.12.3/codecov-win7-x64.zip" -OutFile (Join-Path $pwd Codecov.zip)
          Expand-Archive .\\Codecov.zip -DestinationPath .
          .\codecov.exe -f build\coverage_results\Coverage.xml -t ${{ secrets.CODECOV_TOKEN }}
