macro(setup_system_specific_variables)
    if (CMAKE_SYSTEM_NAME STREQUAL Linux)
        set(CMAKE_CXX_COMPILER clang++)
        set(CMAKE_C_COMPILER clang)
        set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
        set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
        set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG")
        set(CMAKE_C_FLAGS_DEBUG "-g -O0")
        set(CMAKE_POSITION_INDEPENDENT_CODE "ON" CACHE BOOL "" FORCE)
        set(CMAKE_CXX_FLAGS "-DLINUX -pipe -fvisibility=default")
        set(CMAKE_EXE_LINKER_FLAGS "-Wl,--enable-new-dtags,-rpath,\$ORIGIN -fuse-ld=gold")
        set(CMAKE_MODULE_LINKER_FLAGS "-Wl,--enable-new-dtags,-rpath,\$ORIGIN -fuse-ld=gold")
        set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--enable-new-dtags,-rpath,\$ORIGIN -fuse-ld=gold")
    endif(CMAKE_SYSTEM_NAME STREQUAL Linux)
endmacro(setup_system_specific_variables)

macro(subdirectories_list result curdir)
    file(GLOB children RELATIVE ${curdir} ${curdir}/*)
    set(dirlist "")
    foreach(child ${children})
        if(IS_DIRECTORY ${curdir}/${child})
            list(APPEND dirlist ${child})
        endif(IS_DIRECTORY ${curdir}/${child})
    endforeach()
    set(${result} ${dirlist})
endmacro(subdirectories_list)

function(get_all_libraries result)
    subdirectories_list(SUBDIRS ${CMAKE_SOURCE_DIR}/libs)
    set(${result} ${SUBDIRS} PARENT_SCOPE)
endfunction()

function(get_all_apps result)
    subdirectories_list(SUBDIRS ${CMAKE_SOURCE_DIR}/apps)
    set(${result} ${SUBDIRS} PARENT_SCOPE)
endfunction()

function(PREPEND var prefix)
    set(listVar "")
    foreach(f ${ARGN})
        list(APPEND listVar "${prefix}/${f}")
    endforeach(f)
    set(${var} "${listVar}" PARENT_SCOPE)
endfunction(PREPEND)

function(find_tool TOOL_NAME)
    string(REPLACE "-" "_" TOOL_NAME_TO_UPPER "${TOOL_NAME}")
    string(REPLACE ".bat" "" TOOL_NAME_TO_UPPER "${TOOL_NAME_TO_UPPER}")
    string(TOUPPER ${TOOL_NAME_TO_UPPER} TOOL_NAME_TO_UPPER)
    find_program(${TOOL_NAME_TO_UPPER}_EXECUTABLE NAMES ${TOOL_NAME})
    if (${${TOOL_NAME_TO_UPPER}_EXECUTABLE} STREQUAL "${TOOL_NAME_TO_UPPER}_EXECUTABLE-NOTFOUND")
        message(FATAL_ERROR "${${TOOL_NAME_TO_UPPER}_EXECUTABLE} not found, please install this tool and add it to path or disable option NL_BUILD_ENALBE_${TOOL_NAME_TO_UPPER}." )
    endif (${${TOOL_NAME_TO_UPPER}_EXECUTABLE} STREQUAL "${TOOL_NAME_TO_UPPER}_EXECUTABLE-NOTFOUND")
endfunction(find_tool TOOL_NAME)

macro(find_3rdparty_libraries 3RDPARTY_LIBRARIES 3RDPARTY_LIBRARIES_VERSIONS)
    list(LENGTH 3RDPARTY_LIBRARIES 3RDPARTY_LIBRARIES_LENGTH)
    list(LENGTH 3RDPARTY_LIBRARIES_VERSIONS 3RDPARTY_LIBRARIES_VERSIONS_LENGTH)
    if(NOT 3RDPARTY_LIBRARIES_LENGTH EQUAL 3RDPARTY_LIBRARIES_VERSIONS_LENGTH)
        message(FATAL_ERROR "You must pass the same number of 3rdparty libraries names and versions! 3RDPARTY_LIBRARIES: ${3RDPARTY_LIBRARIES} 3RDPARTY_LIBRARIES_VERSIONS: ${3RDPARTY_LIBRARIES_VERSIONS}")
    endif(NOT 3RDPARTY_LIBRARIES_LENGTH EQUAL 3RDPARTY_LIBRARIES_VERSIONS_LENGTH)
    math(EXPR len2 "${len1} - 1")
    foreach(3RDPARTY_LIBRARY 3RDPARTY_LIBRARY_VERSION IN ZIP_LISTS 3RDPARTY_LIBRARIES 3RDPARTY_LIBRARIES_VERSIONS)
        find_package(${3RDPARTY_LIBRARY} ${3RDPARTY_LIBRARY_VERSION} REQUIRED)
    endforeach()
endmacro(find_3rdparty_libraries)
