include(cmake/utils.cmake)

function(add_coverage_target)
    if($CACHE{BUILD_ENABLE_COVERAGE} AND NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
        message(FATAL_ERROR "BUILD_ENABLE_COVERAGE=ON works only together with CMAKE_BUILD_TYPE=Debug!!!")
    elseif($CACHE{BUILD_ENABLE_COVERAGE} AND CMAKE_BUILD_TYPE STREQUAL "Debug")
        string(REPLACE / \\ WINDOWS_SRC_DIR ${CMAKE_SOURCE_DIR})
        string(REPLACE / \\ WINDOWS_BINARY_DIR ${CMAKE_BINARY_DIR})
        get_all_libraries(LIBS)
        set(MERGE_CMD "${OPENCPPCOVERAGE_EXECUTABLE};")
        set(COVERAGE_TARGETS "")
        foreach(LIB ${LIBS})
            get_directory_property(LIB_TARGETS DIRECTORY ${CMAKE_SOURCE_DIR}/libs/${LIB} BUILDSYSTEM_TARGETS)
            list(FIND LIB_TARGETS ${LIB}_tests LIB_TEST_FOUND)
            if(NOT (LIB_TEST_FOUND EQUAL -1))
                set(COMMAND "${OPENCPPCOVERAGE_EXECUTABLE};-q;--modules;${LIB};--sources;${WINDOWS_SRC_DIR}\\libs\\${LIB}\\include\\*;--sources;${WINDOWS_SRC_DIR}\\libs\\${LIB}\\src\\*;--export_type;binary:coverage_results/${LIB}_tests.cov;--;${WINDOWS_BINARY_DIR}\\bin\\Debug\\${LIB}_tests.exe;")
                add_custom_target(COVERAGE_${LIB} COMMAND ${COMMAND} DEPENDS "${LIB}_tests")
                set_target_properties(COVERAGE_${LIB} PROPERTIES FOLDER "coverage")
                list(APPEND MERGE_CMD "--input_coverage;coverage_results/${LIB}_tests.cov;")
                list(APPEND COVERAGE_TARGETS "COVERAGE_${LIB}")
            endif()
        endforeach()
        list(APPEND MERGE_CMD "--export_type;html:coverage_results/Coverage;--export_type;cobertura:coverage_results/Coverage.xml;")
        add_custom_target(COVERAGE COMMAND ${MERGE_CMD} DEPENDS ${COVERAGE_TARGETS})
        set_target_properties(COVERAGE PROPERTIES FOLDER "coverage")
    endif()
endfunction()
